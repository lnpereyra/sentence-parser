{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","handleFileChange","e","file","target","files","reader","FileReader","readAsText","onload","setState","fileName","name","fileContent","result","Swal","fire","icon","title","onerror","console","log","error","state","stringToCompare","sentencesArray","index","this","splice","value","String","allNames","match","text","areNamesInside","every","RegExp","test","className","for","style","display","variant","color","id","type","onChange","Button","startIcon","component","map","val","i","TextField","label","input","handleChange","left","top","endIcon","onClick","regExpOperationChange","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1a530578.chunk.js","sourcesContent":["//import logo from './logo.svg';\nimport Swal from 'sweetalert2';\nimport './App.css';\nimport React,{Component} from 'react';\nimport '@fontsource/roboto';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport KeyboardArrowRightIcon from '@material-ui/icons/KeyboardArrowRight';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport CloudDoneIcon from '@material-ui/icons/CloudDone';\n \nclass App extends Component {  \n  \n  constructor(props){\n    super(props);\n    this.state = {\n      fileName: '',\n      fileContent: '',\n      stringToCompare:'',\n      sentencesArray: ['', '', '','']\n    };\n  }   \n\n  handleChange(index, e) {\n    const { sentencesArray } = this.state;\n    sentencesArray.splice(index, 1, e.target.value)\n    this.setState({ sentencesArray: [...sentencesArray] }, () => {\n      console.log(this.state.sentencesArray)\n    });\n  }\n\n  regExpOperationChange(index,e){ \n    const {sentencesArray} = this.state;\n    const {fileContent} = this.state;\n    var stringToCompare = String(sentencesArray[index]);\n    var namesFile = String(fileContent);\n    var allNames = namesFile.match(/([a-zA-Z]+)/g);\n    console.log(allNames);\n\n    function allElementsInTheString(name) {\n    var regExpToCompare = new RegExp(name,'gi');\n    return regExpToCompare.test(stringToCompare);\n    }\n\n    if(allNames === null){Swal.fire({\n      icon: 'warning',\n      title: 'Oops...',\n      text: 'Please remember to upload file with names first'\n      })\n    }\n\n    else{var areNamesInside = allNames.every(allElementsInTheString);}\n\n    if(areNamesInside === false){Swal.fire({\n      icon: 'error',\n      title: 'Oops...',\n      text: 'The names are not inside this sentence'\n      })\n    }\n    if(areNamesInside === true){Swal.fire({\n      icon: 'success',\n      title: 'Yay!',\n      text: 'The names are inside this sentence'\n      })\n  }\n}\n  \n\n  handleFileChange = e => {\n    const file = e.target.files[0];\n    const reader = new FileReader();\n    reader.readAsText(file);\n    reader.onload = () => {\n      this.setState({fileName: file.name, fileContent: reader.result});       \n      Swal.fire({\n        icon: 'success',\n        title: 'Your file is uploaded!'\n        })     \n    }\n    reader.onerror = () =>{\n      console.log('file error', reader.error)\n    }\n  }     \n      \n    render() {   \n\n      return (        \n          <div className=\"App\">\n            <header className=\"App-header\">\n              {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n              <p>Welcome to Sentence Parser!</p>\n              <p>\n                Here we can compare the names in a file \n                with four sentences of our choise\n              </p>\n            <form>\n             <div>\n             <label for=\"upload-file\">\n              <input\n                style={{display: \"none\"}}\n                variant=\"outlined\"\n                color=\"secondary\"\n                id=\"upload-file\"\n                name=\"upload-file\"\n                type=\"file\"\n                onChange={this.handleFileChange}\n              />\n              {this.state.fileContent === \"\" &&\n             <Button startIcon={<CloudUploadIcon/>} color=\"default\" variant=\"contained\" component=\"span\">\n              Upload File\n             </Button>}{\" \"}           \n             {this.state.fileContent !== \"\" &&\n             <Button startIcon={<CloudDoneIcon/>} color=\"default\" variant=\"contained\" component=\"span\">\n              File Uploaded\n             </Button>}{\" \"}     \n            </label>\n             </div>\n             <br></br>\n             </form>\n                Please write four sentences to be compared below\n              {\n              this.state.sentencesArray.map((val, i) =>              \n              <div key={i}>\n              <br></br>\n              <TextField label={\"Sentence number \"+(i+1)+\" here..\"} variant='filled' input='color:white' color='default' type=\"text\" onChange={(e) => { this.handleChange(i, e) }} value={val} />\n              <Button style={{left: \"10px\", top: \"10px\"}} type=\"submit\" variant='contained' color='default' endIcon={<KeyboardArrowRightIcon/>} onClick ={(e) => { this.regExpOperationChange(i, e) }}>Submit</Button>  \n              </div>)\n              }\n              <p>\n                Click Submit and see the results!\n              </p>          \n            </header>\n          </div>       \n      );\n    }\n  }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}